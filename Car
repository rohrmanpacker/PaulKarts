package paulkarts;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import javafx.scene.transform.Rotate;
import javafx.scene.canvas.GraphicsContext;
import javafx.beans.property.ObjectProperty;
import javafx.geometry.Rectangle2D;

public class Car
{
	private ImageView imageView;
	private double positionX;
	private double positionY;    
	private double velocity;
	private double angle;
	private double width;
	private double height;
	private double acceleration;
	private boolean crash;
	private int currentLap;
	private boolean canLap;

	public Car(double x, double y){
		imageView =new ImageView();
		imageView.setRotate(0);
		positionX=x;
		positionY=y;
		velocity = 0;
		acceleration=0;
		angle = 270;
		crash=false;
		currentLap=1;
		canLap=true;
	}

	public Car()
	{
		this(0,0);    
	}

	public void setImage(Image i)
	{
		imageView.setImage(i);
		width = i.getWidth();
		height = i.getHeight();
		imageView.setRotate(angle);
	}

	public void setImage(String filename)
	{
		Image i = new Image(filename);
		setImage(i);
	}

	public Image getImage(){
		return imageView.getImage();
	}
	
	public final ObjectProperty<Image> imageProperty(){
		return imageView.imageProperty();
	}

	public ImageView getImageView(){return imageView;}

	public double getX(){
		return positionX;
	}
	public double getY(){
		return positionY;
	}
	public double getAcceleration(){return acceleration;}
	public double getVelocity(){return velocity;}
	public double getAngle(){return angle;}
	public int getLapsCompleted(){return currentLap-1;}
	public boolean canLap(){return canLap;}
	public int lapsToAdd(){
		if(logicalXOR(velocity>0,angle>180)){
			return -1;
		}
		return 1;
	}
	
	public void addLaps(int laps){
		this.currentLap+=laps;
	}
	
	public void setCanLap(boolean canLap){
		this.canLap=canLap;
	}
	
	public void setPosition(double x, double y)
	{
		positionX = x;
		positionY = y;
	}

	public void rotate(double angleChange){
		while(angleChange<0)
			angleChange=(angleChange+360)%360;
		angle+=angleChange+360;
		angle%=360;
		imageView.setRotate(angle);
	}

	public void setVelocity(double v)
	{
		velocity = v;
	}

	public void addVelocity(double v)
	{
		velocity += v;
	}

	public void accelerate(double a){
		acceleration+=a;
	}
	public void setAcceleration(double a){
		acceleration=a;
	}
	public void crash(){


		if(velocity<0){
			positionX += 10*Math.cos(Math.toRadians(angle));
			positionY += 10* Math.sin(Math.toRadians(angle));
		}else{
			positionX -= 10* Math.cos(Math.toRadians(angle));
			positionY -= 10* Math.sin(Math.toRadians(angle));
		}
		acceleration/=2;
		velocity=-velocity;
	}
	public void crash(Car other){
		double angleToAdjust= Math.atan((other.positionY-positionY)/(positionX-other.positionX));
		if(other.positionX>positionX)
			angleToAdjust*=-1;
		positionX += 5*Math.cos(angleToAdjust);
		positionY -= 5* Math.sin(angleToAdjust);
		
	}
	public void crashWall(){
		if(velocity<0){
			positionX += Math.cos(Math.toRadians(angle));
			positionY +=  Math.sin(Math.toRadians(angle));
		}else{
			positionX -=  Math.cos(Math.toRadians(angle));
			positionY -=  Math.sin(Math.toRadians(angle));
		}
		acceleration/=2;
		velocity=-velocity;
		
	}
	




	public void update(double time)//this is what gets run to update the position. vel, accel, etc.
	{

		imageView.setRotate(angle);
		if(!crash){
			velocity += acceleration*time/10;

			if(velocity>.1){//sets max speed
				velocity=.1;
			}else if(velocity<-.1){
				velocity =-.1;
			}
			if(acceleration>10){//sets max acceleration
				acceleration=10;
			}else if(acceleration<-10){
				acceleration =-10;
			}

			positionX += velocity * time * Math.cos(Math.toRadians(angle));
			positionY += velocity * time * Math.sin(Math.toRadians(angle));

			if(velocity>0){//slowing down
				velocity-=.001;
			}else if(velocity<0){
				velocity+=.001;
			}

			if(velocity<.001&&velocity>0||velocity>-.001&&velocity<0){//gets rid of rounding errors 
				velocity=0;
			}

			acceleration=0;

		}
	}

	public void render(GraphicsContext gc)
	{
		gc.save();
		Rotate r = new Rotate(angle+90, positionX + imageView.getImage().getWidth() / 2, positionY + imageView.getImage().getWidth() / 2);
		gc.setTransform(r.getMxx(), r.getMyx(), r.getMxy(), r.getMyy(), r.getTx(), r.getTy());
		gc.drawImage( imageView.getImage(), positionX, positionY );
		gc.restore();
		
	}

	public Rectangle2D getBoundary()
	{
		return new Rectangle2D(positionX,positionY,width,height);
	}

	public boolean intersects(Car s)
	{
		return s.getBoundary().intersects( this.getBoundary() );
	}
	public static boolean logicalXOR(boolean x, boolean y) {
	    return ( ( x || y ) && ! ( x && y ) );
	}

	public String toString()
	{
		return " Position: [" + positionX + "," + positionY + "]" 
				+ " Velocity: [" + velocity + "]" + " Angle: [" + angle + "]";
	}
}
