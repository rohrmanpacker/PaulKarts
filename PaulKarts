package paulkarts;


import java.util.ArrayList;

import javafx.animation.AnimationTimer;
import javafx.application.*;
import javafx.event.EventHandler;
import javafx.geometry.Rectangle2D;

import javafx.scene.Scene;

import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;


public class PaulKarts extends Application{

	private int startingX =650, startingY=250;
	private double[][] defaultPositions = {{startingX,startingY},{startingX+50,startingY+25},{startingX+100,startingY+50},
			{startingX,startingY+75},{startingX+50,startingY+100},{startingX+100,startingY+125},
			{startingX,startingY+150},{startingX+50,startingY+175},{startingX+100,startingY+200}};

	public static void main(String[] args){
		Application.launch(args);
	}


	public void start(Stage primaryStage) throws Exception {
		int width = 800, height = 600, lapsToWin=5;
		primaryStage.setWidth(width+16);//idk why this works but it does
		primaryStage.setHeight(height+39);




		VBox root = new VBox();
		Canvas canvas = new Canvas(width,height);//background
		root.getChildren().add(canvas);
		GraphicsContext gc = canvas.getGraphicsContext2D();//this is the background



		ArrayList<Car> cars = new ArrayList<Car>();//array of cars

		for(int i = 0;i<defaultPositions.length;i++){//makes all the cars that there are default positions for
			cars.add(new Car(defaultPositions[i][0],defaultPositions[i][1]));//makes the cars

		}
		Car myCar=cars.get(cars.size()-1);
		Car otherCar = cars.get(cars.size()-2);

		for(Car c:cars)
			c.setImage("car1.png");


		myCar.setImage("car2.png");
		otherCar.setImage("car3.png");
		
		Scene scene = new Scene(root,width,height);

		ArrayList<String> input = new ArrayList<String>();
		scene.setOnKeyPressed(
				new EventHandler<KeyEvent>(){
					public void handle(KeyEvent e){
						String code = e.getCode().toString();
						if(!input.contains(code)){
							input.add(code);
						}
					}
				}
				);//this makes the input array have the inputs in String form so we can use them later

		scene.setOnKeyReleased(
				new EventHandler<KeyEvent>(){
					public void handle(KeyEvent e){
						String code = e.getCode().toString();
						input.remove(code);
					}
				}
				);//this takes the code out of input if it is no longer being pressed

		primaryStage.setScene(scene);
		primaryStage.setTitle("PAULKARTS");

		ArrayList<Rectangle2D> borders=Border.getBorder(height, width);
		ArrayList<Rectangle2D> goUps = Border.getUp(gc, height, width);
		ArrayList<Rectangle2D> goLefts = Border.getLeft(gc, height, width);
		ArrayList<Rectangle2D> goRights = Border.getRight(gc, height, width);
		ArrayList<Rectangle2D> goDowns = Border.getDown(gc, height, width);
		ArrayList<Rectangle2D> startingLines = Border.getStartingLine(height, width);
		ArrayList<Rectangle2D> boostArea = Border.getBoost(height, width);
		ArrayList<Car> haveWon = new ArrayList<Car>();
		double changeAngle = 3;

		final long startNanoTime = System.nanoTime();//getting nanotime for animation uses
		new AnimationTimer()//this is like the game timer
		{
			public void handle(long currentNanoTime)
			{

				//t is the total change in time since the start in seconds
				double t = (currentNanoTime - startNanoTime) / 1000000000.0; 
				gc.clearRect(0, 0, width, height);//clears the canvas
				gc.strokeRect(0, 0, width, height);
				//this is the border
				//Border.drawTurns(gc, height, width);
				Border.drawBoundries(gc, height, width);
				Border.drawStartingLine(gc, height, width);
				//Border.drawBoost(gc, height, width);

				gc.save();
				gc.setFill(Color.WHITE);
				gc.setFont(new Font(32));
				if(t>=0&&t<1){//this is the starting sequence
					gc.fillText("START IN", 680, 200);
				}
				if(t>=1&&t<2){
					gc.fillText("3",width*.45, height*.57);
				}
				if(t>=2&&t<3){
					gc.fillText("2", width*.45, height*.57);
				}
				if(t>=3&&t<4){
					gc.fillText("1", width*.45, height*.57);
				}
				if(t>=4&&t<5){
					gc.fillText("GO!",width*.45, height*.57);
				}
				if(t>=5/*&&lapsToWin-myCar.getLapsCompleted()!=0*/){
					gc.fillText("Laps remaining: "+(lapsToWin-myCar.getLapsCompleted())+", "+(lapsToWin-otherCar.getLapsCompleted()), width*.3, height*.57);
				}
				gc.restore();
				if(haveWon.size()==cars.size()-1){
					for(Car c:cars)
						if(!haveWon.contains(c))
							haveWon.add(c);
				}
				for(Car c:cars){
					if(c.getLapsCompleted()>=lapsToWin&&!haveWon.contains(c))//if the car is done and not already in
						haveWon.add(c);
					c.setCanMove(t>=4&&!haveWon.contains(c));
				}
				for(int i =0; i<haveWon.size();i++){
					if(i==0){
						gc.setFill(Color.GOLD);
						gc.fillText(""+(i+1)+"st", haveWon.get(i).getX(), haveWon.get(i).getY()-5);
					}else if(i==1){
						gc.setFill(Color.SILVER);
						gc.fillText(""+(i+1)+"nd", haveWon.get(i).getX(), haveWon.get(i).getY()-5);
					}else if(i==2){
						gc.setFill(Color.CHOCOLATE);
						gc.fillText(""+(i+1)+"rd", haveWon.get(i).getX(), haveWon.get(i).getY()-5);
					}else{
						gc.setFill(Color.BLACK);
						gc.fillText(""+(i+1)+"th", haveWon.get(i).getX(), haveWon.get(i).getY()-5);
					}
				}

				//controls movement (and you can't go until after it says GO and if you the game is over
				if(input.contains("SPACE")){
					input.remove("SPACE");
					primaryStage.close();
					try {
						new PaulKarts().start(new Stage());
					} catch (Exception e) {

						e.printStackTrace();
					}
				}
				if(input.contains("W")){
					myCar.accelerate(.002);
				}
				if(input.contains("S")){
					myCar.accelerate(-.002);
				}
				if(input.contains("A")){
					myCar.rotate(-changeAngle);
				}
				if(input.contains("D")){
					myCar.rotate(changeAngle);
				}
				
				if(input.contains("UP")){
					otherCar.accelerate(.002);
				}
				if(input.contains("DOWN")){
					otherCar.accelerate(-.002);
				}
				if(input.contains("LEFT")){
					otherCar.rotate(-changeAngle);
				}
				if(input.contains("RIGHT")){
					otherCar.rotate(changeAngle);
				}

				if(input.contains("ESCAPE")){
					primaryStage.close();
				}
				for(int i =0;i<borders.size();i++){
					for(Car c:cars)
						if(borders.get(i).intersects(c.getBoundary())){
							c.crashWall();
						}
				}

				for(int i = 0; i<cars.size()-1;i++){//this is the crashing mechanism
					for(int j=i+1;j<cars.size();j++){
						if(i!=j&&cars.get(i).intersects(cars.get(j))){
							cars.get(i).crash(cars.get(j));
							cars.get(j).crash(cars.get(i));
						}
					}

				}
				//myCar.setMaxVelocity(.075); //an idea idk about :/

				for(Car c:cars){//this will decide how other cars move
					if(c!=myCar&&c!=otherCar){
						c.accelerate(.002);

						double angle=c.getAngle();


						for(Rectangle2D left:goLefts){//makes it turn left in those boxes
							if(left.contains(c.getBoundary())&&angle>185){
								c.rotate(-changeAngle);
							}
							if(left.contains(c.getBoundary())&&angle<175){
								c.rotate(changeAngle);
							}
						}
						for(Rectangle2D up:goUps){//makes it turn up in those boxes 
							if(up.contains(c.getBoundary())&&(angle<90||angle>275)){
								c.rotate(-changeAngle);
							}
							if(up.contains(c.getBoundary())&&angle>90&&angle<265){
								c.rotate(changeAngle);
							}
						}
						for(Rectangle2D right:goRights){//makes it turn right in those boxes 
							if(right.contains(c.getBoundary())&&angle<180&&angle>5){
								c.rotate(-changeAngle);
							}
							if(right.contains(c.getBoundary())&&angle>180&&angle<355){
								c.rotate(changeAngle);
							}
						}
						for(Rectangle2D down:goDowns){//makes it turn down in those boxes 
							if(down.contains(c.getBoundary())&&angle<270&&angle>95){
								c.rotate(-changeAngle);
							}
							if(down.contains(c.getBoundary())&&(angle<85||angle>270)){
								c.rotate(changeAngle);
							}
						}
					}
				}

				for(Car c:cars){//this does all the cars
					for(Rectangle2D rect:boostArea){
						if(rect.contains(c.getBoundary())){
							c.setMaxVelocity(.2);
						}else{
							if(c==myCar||c==otherCar)
								c.setMaxVelocity(.1);
							else
								c.setMaxVelocity(Math.random()*.025+.1);
						}
					}
					if(startingLines.get(0).intersects(c.getBoundary())&&c.canLap()){
						c.setCanLap(false);
						c.addLaps(c.lapsToAdd());
					}
					if(!startingLines.get(0).intersects(c.getBoundary())
							&&!startingLines.get(1).intersects(c.getBoundary())){
						c.setCanLap(true);
					}
					if(c.getX()>width||c.getX()<-15||c.getY()>height||c.getY()<-15){//this is the reset thing
						c.setPosition(defaultPositions[0][0], defaultPositions[0][1]);
						c.setVelocity(0);
						c.rotate(-c.getAngle());
						c.rotate(270);
					}


					c.update(40);//pastNanoTime[0]-t is the change in time
					c.render(gc);	
				}
			}
		}.start();

		primaryStage.show();
	}

}
