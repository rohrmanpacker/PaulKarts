package paulkarts;


import java.util.ArrayList;

import javafx.animation.AnimationTimer;
import javafx.application.*;
import javafx.event.EventHandler;
import javafx.geometry.Rectangle2D;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.SnapshotParameters;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.text.Text;
import javafx.stage.Stage;


public class PaulKarts extends Application{
	private double[][] defaultPositions = {{650,250},{700,275},{750,300},{650,375},{700,400},{750,425}};
	public static void main(String[] args){
		Application.launch(args);
	}


	public void start(Stage primaryStage) throws Exception {
		int width = 800, height = 600;
		primaryStage.setWidth(width+16);//idk why this works but it does
		primaryStage.setHeight(height+39);

		Text txt=new Text();


		VBox root = new VBox();
		Canvas canvas = new Canvas(width,height);//background
		root.getChildren().addAll(canvas,txt);
		GraphicsContext gc = canvas.getGraphicsContext2D();//this is the background



		ArrayList<Car> cars = new ArrayList<Car>();//array of cars

		for(int i = 0;i<defaultPositions.length;i++){//makes all the cars that there are default positions for
			cars.add(new Car(defaultPositions[i][0],defaultPositions[i][1]));//makes the cars

		}

		root.getChildren().add(cars.get(0).getImageView());
		for(Car c:cars)
			c.setImage("car1.png");



		Scene scene = new Scene(root,width,height);

		ArrayList<String> input = new ArrayList<String>();
		scene.setOnKeyPressed(
				new EventHandler<KeyEvent>(){
					public void handle(KeyEvent e){
						String code = e.getCode().toString();
						if(!input.contains(code)){
							input.add(code);
						}
					}
				}
				);//this makes the input array have the inputs in String form so we can use them later

		scene.setOnKeyReleased(
				new EventHandler<KeyEvent>(){
					public void handle(KeyEvent e){
						String code = e.getCode().toString();
						input.remove(code);
					}
				}
				);//this takes the code out of input if it is no longer being pressed

		primaryStage.setScene(scene);
		primaryStage.setTitle("PAULKARTS");

		ArrayList<Rectangle2D> borders=Border.getBorder(height, width);
		ArrayList<Rectangle2D> goUps = Border.getUp(gc, height, width);
		ArrayList<Rectangle2D> goLefts = Border.getLeft(gc, height, width);
		ArrayList<Rectangle2D> goRights = Border.getRight(gc, height, width);
		ArrayList<Rectangle2D> goDowns = Border.getDown(gc, height, width);
		double changeAngle = 3;

		final long startNanoTime = System.nanoTime();//getting nanotime for animation uses
		double[] pastNanoTime = new double[1];
		new AnimationTimer()//this is like the game timer
		{
			public void handle(long currentNanoTime)
			{
				double t = (currentNanoTime - startNanoTime) / 1000000000.0; //t is the total change in time since the start in seconds
				gc.clearRect(0, 0, width, height);//clears the canvas
				gc.strokeRect(0, 0, width, height);
				//this is the border
				//Border.drawTurns(gc, height, width);
				Border.drawBoundries(gc, height, width);


				if(t>=0&&t<1){//this is the starting sequence
					gc.fillText("START IN", 680, 200);
				}
				if(t>=1&&t<2){
					gc.fillText("3", 700, 200);
				}
				if(t>=2&&t<3){
					gc.fillText("2", 700, 200);
				}
				if(t>=3&&t<4){
					gc.fillText("1", 700, 200);
				}
				if(t>=4&&t<6){
					gc.fillText("GO!", 692, 200);
				}

				//controls movement (and you can't go until after it says GO
				if(t>=4&&input.contains("W")){
					cars.get(0).accelerate(.002);
				}
				if(t>=4&&input.contains("S")){
					cars.get(0).accelerate(-.002);
				}
				if(t>=4&&input.contains("A")){
					cars.get(0).rotate(-changeAngle);
				}
				if(t>=4&&input.contains("D")){
					cars.get(0).rotate(changeAngle);
				}
				for(int i =0;i<borders.size();i++){
					for(Car c:cars)
						if(borders.get(i).intersects(c.getBoundary())){
							c.crash();
						}
				}

				for(int i = 0; i<cars.size()-1;i++){//this is the crashing mechanism
					for(int j=i+1;j<cars.size();j++){
						if(i!=j&&cars.get(i).intersects(cars.get(j))){
							cars.get(i).crash();
							cars.get(j).crash();
						}
					}

				}

				if(t>=4)
					for(int i=1;i<cars.size();i++){//this will decide how other cars move
						Car temp = cars.get(i);
						temp.accelerate(.002);
						double angle=temp.getAngle();


						for(Rectangle2D left:goLefts){//makes it turn left in those boxes
							if(left.contains(temp.getBoundary())&&angle>185){
								temp.rotate(-changeAngle);
							}
							if(left.contains(temp.getBoundary())&&angle<175){
								temp.rotate(changeAngle);
							}
						}
						for(Rectangle2D up:goUps){//makes it turn up in those boxes 
							if(up.contains(temp.getBoundary())&&(angle<90||angle>275)){
								temp.rotate(-changeAngle);
							}
							if(up.contains(temp.getBoundary())&&angle>90&&angle<265){
								temp.rotate(changeAngle);
							}
						}
						for(Rectangle2D right:goRights){//makes it turn right in those boxes 
							if(right.contains(temp.getBoundary())&&angle<180&&angle>5){
								temp.rotate(-changeAngle);
							}
							if(right.contains(temp.getBoundary())&&angle>180&&angle<355){
								temp.rotate(changeAngle);
							}
						}
						for(Rectangle2D down:goDowns){//makes it turn down in those boxes 
							if(down.contains(temp.getBoundary())&&angle<270&&angle>95){
								temp.rotate(-changeAngle);
							}
							if(down.contains(temp.getBoundary())&&(angle<85||angle>270)){
								temp.rotate(changeAngle);
							}
						}


					}

				for(Car c:cars){//this does all the cars
					if(c.getX()>width||c.getX()<-15||c.getY()>height||c.getY()<-15){//this is the reset thing
						c.setPosition(defaultPositions[0][0], defaultPositions[0][1]);
						c.setVelocity(0);
						c.rotate(-c.getAngle());
						c.rotate(270);
					}
					c.update(40);//pastNanoTime[0]-t is the change in time
					c.render(gc);	
				}

				//txt.setText(""+cars.get(1).getAngle()+"\t"+cars.get(2).getAngle()+"\t"+cars.get(3).getAngle()+"\t"+cars.get(4).getAngle());
				pastNanoTime[0]=t;
			}
		}.start();

		primaryStage.show();
	}

}
